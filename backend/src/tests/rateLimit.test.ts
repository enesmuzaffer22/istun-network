// src/tests/rateLimit.test.ts
import request from 'supertest';
import app from './testApp';
import { sleep } from './helpers/testHelpers';

describe('ğŸš« Rate Limiting Tests', () => {

    // Rate limiting test'i environment'da skip et (Ã§Ã¼nkÃ¼ test iÃ§in limit 1000)
    const describeIf = process.env.NODE_ENV !== 'test' ? describe : describe.skip;

    describeIf('Rate Limit KontrolÃ¼', () => {
        test('âœ… Normal istek sayÄ±sÄ± kabul edilmeli', async () => {
            // 10 ardÄ±ÅŸÄ±k istek gÃ¶nder
            const promises = Array.from({ length: 10 }, () =>
                request(app).get('/')
            );

            const responses = await Promise.all(promises);

            // Ã‡oÄŸu baÅŸarÄ±lÄ± olmalÄ±
            const successfulRequests = responses.filter(r => r.status === 200);
            expect(successfulRequests.length).toBeGreaterThan(0);
        });

        test('âš¡ Ã‡ok hÄ±zlÄ± istekler rate limite takÄ±lmalÄ±', async () => {
            // Test environment'da skip edilir
            if (process.env.NODE_ENV === 'test') {
            return;
        }

        // 100 ardÄ±ÅŸÄ±k istek gÃ¶nder (rate limit: 60/dakika)
        const promises = Array.from({ length: 100 }, () =>
            request(app).get('/')
        );

        const responses = await Promise.all(promises);

        // BazÄ±larÄ± 429 (Too Many Requests) almalÄ±
        const rateLimitedRequests = responses.filter(r => r.status === 429);
        expect(rateLimitedRequests.length).toBeGreaterThan(0);

        // Rate limit response'unda mesaj olmalÄ±
        if (rateLimitedRequests.length > 0) {
            expect(rateLimitedRequests[0].body.message).toContain('fazla istek');
        }
    });
});

describe('Rate Limit Headers', () => {
    test('âœ… Rate limit headers dÃ¶ndÃ¼rÃ¼lmeli', async () => {
        const response = await request(app).get('/');

        // Test environment'da rate limit skip edilir
        if (process.env.NODE_ENV !== 'test') {
            expect(response.headers).toHaveProperty('x-ratelimit-limit');
            expect(response.headers).toHaveProperty('x-ratelimit-remaining');
        }
    });
});

describe('Endpoint Specific Rate Limiting', () => {
            test('âœ… Her endpoint aynÄ± rate limiti paylaÅŸmalÄ±', async () => {
            const endpoints = [
        '/',
        '/api/news',
        '/api/jobs',
        '/api/roadmaps'
    ];

    for (const endpoint of endpoints) {
        const response = await request(app).get(endpoint);

        // Her endpoint'e eriÅŸim saÄŸlanmalÄ± (rate limit global)
        expect([200, 404, 500]).toContain(response.status);

        // 429 alÄ±nmamalÄ± (test ortamÄ±nda limit yÃ¼ksek)
        expect(response.status).not.toBe(429);
    }
});
    });
}); 